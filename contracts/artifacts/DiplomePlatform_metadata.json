{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_nftAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "company",
						"type": "address"
					}
				],
				"name": "CompanyRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "company",
						"type": "address"
					}
				],
				"name": "DiplomaVerified",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "idDiplome",
						"type": "uint256"
					}
				],
				"name": "DiplomeRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "establishment",
						"type": "address"
					}
				],
				"name": "EstablishmentRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "company",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "studentId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "note",
						"type": "string"
					}
				],
				"name": "StudentEvaluated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "idEtudiant",
						"type": "uint256"
					}
				],
				"name": "StudentRegistered",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "EVALUATION_REWARD",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "VERIFICATION_FEES",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_idEtudiant",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_note",
						"type": "string"
					}
				],
				"name": "evaluateStudent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_studentWallet",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_tokenURI",
						"type": "string"
					}
				],
				"name": "mintDiplomaForStudent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "ID_Entreprise",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "Nom",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Secteur",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Date_Creation",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Classification_Taille",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Pays",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Adresse",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Courriel",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Telephone",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Site_Web",
								"type": "string"
							}
						],
						"internalType": "struct DiplomeData.Entreprise",
						"name": "_entreprise",
						"type": "tuple"
					}
				],
				"name": "registerCompany",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "ID_Diplome",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "ID_Titulaire",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "Nom_Etablissement",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "ID_EES",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "Pays",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Type_Diplome",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Specialite",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Mention",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Date_dobtention",
								"type": "string"
							}
						],
						"internalType": "struct DiplomeData.Diplome",
						"name": "_diplome",
						"type": "tuple"
					}
				],
				"name": "registerDiplome",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "ID_ELS",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "Nom_Etablissement",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Type",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Pays",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Adresse",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Site_Web",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "ID_Agent",
								"type": "uint256"
							}
						],
						"internalType": "struct DiplomeData.EtablissementEnseignementSuperieur",
						"name": "_etab",
						"type": "tuple"
					}
				],
				"name": "registerEstablishment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "ID_Etudiant",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "Nom",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Prenom",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Date_de_naissance",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Sexe",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Nationalite",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Statut_civil",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Adresse",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Courriel",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Telephone",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Section",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Sujet_PFE",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Entreprise_Stage_PFE",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "NometPrenom_MaitreDuStage",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Date_debut_stage",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Date_fin_stage",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "Evaluation",
								"type": "string"
							}
						],
						"internalType": "struct DiplomeData.Etudiant",
						"name": "_student",
						"type": "tuple"
					}
				],
				"name": "registerStudent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "verifyDiploma",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Contrat principal qui gère les enregistrements et interactions       (Etablissements, Entreprises, Etudiants, Diplômes), ainsi que       l'émission et la vérification d'un NFT \"Diplome\", et la gestion       de tokens ERC20 pour la rémunération et les frais.",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Constructeur. Initialise l'owner par défaut via Ownable().      Définit les références vers DiplomeToken (ERC20) et DiplomeNFT (ERC721).",
					"params": {
						"_nftAddress": "Adresse du contrat DiplomeNFT déployé",
						"_tokenAddress": "Adresse du contrat DiplomeToken déployé"
					}
				},
				"evaluateStudent(uint256,string)": {
					"details": "Permet à une entreprise d'évaluer un étudiant.      - On précise l'ID de l'étudiant à évaluer.      - On stocke la note (ou commentaire) dans etudiants[_idEtudiant].Evaluation.      - L'entreprise reçoit EVALUATION_REWARD tokens en récompense. Émet l'événement StudentEvaluated, contenant l'adresse de l'entreprise, l'ID de l'étudiant et la note donnée.",
					"params": {
						"_idEtudiant": "L'identifiant de l'étudiant (tel que défini lors du registerStudent)",
						"_note": "La note ou le commentaire attribué par l'entreprise (string)"
					}
				},
				"mintDiplomaForStudent(address,string)": {
					"details": "Permet à un établissement (autorisé) de minter un NFT représentant un Diplôme.",
					"params": {
						"_studentWallet": "Adresse du wallet de l'étudiant (destinataire du NFT).",
						"_tokenURI": "URI contenant les métadonnées du diplôme (ex: IPFS). Seuls les Établissements (ActorType.Establishment) autorisés dans establishmentSet peuvent exécuter cette fonction."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"registerCompany((uint256,string,string,string,string,string,string,string,string,string))": {
					"details": "Enregistre une entreprise. L'appelant (msg.sender) devient 'Company'.",
					"params": {
						"_entreprise": "Struct DiplomeData.Entreprise avec                    toutes les informations de l'entreprise. - Stocke les données dans entrepriseData[msg.sender]. - Émet un événement CompanyRegistered."
					}
				},
				"registerDiplome((uint256,uint256,string,uint256,string,string,string,string,string))": {
					"details": "Enregistre un nouveau diplôme dans la variable 'diplomes',       pour un suivi on-chain supplémentaire (indépendamment du NFT).",
					"params": {
						"_diplome": "Struct DiplomeData.Diplome contenant toutes les infos du diplôme. - Vérifie que ce diplomaId n'existe pas déjà dans le mapping. - Émet un événement DiplomeRegistered."
					}
				},
				"registerEstablishment((uint256,string,string,string,string,string,uint256))": {
					"details": "Enregistre un établissement d'enseignement supérieur (EES).      L'appelant (msg.sender) devient 'Establishment' s'il ne l'était pas déjà.",
					"params": {
						"_etab": "Struct DiplomeData.EtablissementEnseignementSuperieur avec              toutes les informations de l'établissement. - Stocke les données dans eesData[msg.sender]. - Ajoute l'adresse dans establishmentSet pour l'autoriser à minter des diplômes. - Émet un événement EstablishmentRegistered."
					}
				},
				"registerStudent((uint256,string,string,string,string,string,string,string,string,string,string,string,string,string,string,string,string))": {
					"details": "Enregistre un nouvel étudiant. Les informations sont passées sous forme de struct.",
					"params": {
						"_student": "Struct DiplomeData.Etudiant contenant toutes les infos de l'étudiant. - Vérifie que l'ID_Etudiant n'est pas déjà enregistré. - Stocke dans etudiants[_student.ID_Etudiant]. - Émet un événement StudentRegistered."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"verifyDiploma(uint256)": {
					"details": "Vérifie l'authenticité d'un diplôme (NFT).       En contrepartie, l'entreprise paie VERIFICATION_FEES tokens.",
					"params": {
						"_tokenId": "ID du NFT (diplôme) à vérifier. L'entreprise doit au préalable faire \"approve\" de VERIFICATION_FEES  sur DiplomeToken pour ce contrat. Ensuite, on prélève les tokens. La fonction ownerOf(_tokenId) dans DiplomeNFT assure que le NFT existe. Émet un événement DiplomaVerified."
					}
				},
				"withdrawTokens(uint256)": {
					"details": "Permet au propriétaire (owner) du contrat de retirer une quantité       de tokens (DPT) stockés dans ce contrat.",
					"params": {
						"_amount": "Quantité de tokens à retirer."
					}
				}
			},
			"title": "DiplomePlatform",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/DiplomePlatform.sol": "DiplomePlatform"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308",
			"license": "MIT",
			"urls": [
				"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80",
				"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606",
			"license": "MIT",
			"urls": [
				"bzz-raw://fd54abb96a6156d9a761f6fdad1d3004bc48d2d4fce47f40a3f91a7ae83fc3a1",
				"dweb:/ipfs/QmUrFSGkTDJ7WaZ6qPVVe3Gn5uN2viPb7x7QQ35UX4DofX"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC165.sol": {
			"keccak256": "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
			"license": "MIT",
			"urls": [
				"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
				"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC4906.sol": {
			"keccak256": "0x1b8691e244f6e11d987459993671db0af33e6a29f7805eac6a9925cc6b601957",
			"license": "MIT",
			"urls": [
				"bzz-raw://a9e2a5efc2e14e98f5fe91bbab769199b4987a40dd3b96075b04957fda2ae80f",
				"dweb:/ipfs/QmbAjrSSVBiJ6MbgF7Jkr53m674iGMZ6haWbbRrWDZJraK"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC5267.sol": {
			"keccak256": "0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a",
				"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC721.sol": {
			"keccak256": "0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d",
			"license": "MIT",
			"urls": [
				"bzz-raw://01c66a2fad66bc710db7510419a7eee569b40b67cd9f01b70a3fc90d6f76c03b",
				"dweb:/ipfs/QmT1CjJZq4eTNA4nu8E9ZrWfaZu6ReUsDbjcK8DbEFqwx5"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
			"license": "MIT",
			"urls": [
				"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
				"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7a5cb39b1e6df68f4dd9a5e76e853d745a74ffb3dfd7df4ae4d2ace6992a171",
				"dweb:/ipfs/QmPbzKR19rdM8X3PLQjsmHRepUKhvoZnedSR63XyGtXZib"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
			"keccak256": "0xaa7f0646f49ebe2606eeca169f85c56451bbaeeeb06265fa076a03369a25d1d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://ee931d4e832385765967efe6366dcc6d00d6a2d794f9c66ee38283c03882de9c",
				"dweb:/ipfs/QmR6SkuJGYxpQeLz38rBdghqaWqEPfzUsL9kBoXgEXKtbD"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea8b92e4245d75a5579c10f22f118f7b4ba07c57341f181f0b2a85ff8663de3",
				"dweb:/ipfs/Qme3Ss5ByjmkxxkMdLpyu7fQ1PCtjNFH1wEFszt2BZePiG"
			]
		},
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c5ae6d85bd48cca8d6d2fcec8c63efd86f56f8a5832577a47e403ce0e65cb09",
				"dweb:/ipfs/QmUtcS8AbRSWhuc61puYet58os8FvSqm329ChoW8wwZXZk"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261",
			"license": "MIT",
			"urls": [
				"bzz-raw://6b7f97c5960a50fd1822cb298551ffc908e37b7893a68d6d08bce18a11cb0f11",
				"dweb:/ipfs/QmQQvxBytoY1eBt3pRQDmvH2hZ2yjhs12YqVfzGm7KSURq"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d",
			"license": "MIT",
			"urls": [
				"bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34",
				"dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
			"keccak256": "0xe52813067c6d5838eeb34e1da8beb2514371a7d778266013b04ca3be1dda7100",
			"license": "MIT",
			"urls": [
				"bzz-raw://53fb552d625eb5f60ef9dce439c826bb780952cbbafc985db6e48ac6382a5585",
				"dweb:/ipfs/QmSEbLqEWN1SqsWekfqt6RWC4oEajFWtZ5j8i6gKaGdtKr"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02",
				"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE"
			]
		},
		"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol": {
			"keccak256": "0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855",
			"license": "MIT",
			"urls": [
				"bzz-raw://746d295e403931aeb9d6065fd5a0871f43ab5459814a60623611e4b6641a09fd",
				"dweb:/ipfs/QmWrgT8YJrQ9FfD1o3YYArwo57e7MGdpFKuM74qJ4qE34E"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Nonces.sol": {
			"keccak256": "0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f",
			"license": "MIT",
			"urls": [
				"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e",
				"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/ShortStrings.sol": {
			"keccak256": "0x7d94fa0af099a2172eb01f9c8a8a443cbe7e0e43654841563e4e09968efdb549",
			"license": "MIT",
			"urls": [
				"bzz-raw://65e38fb76b6add407d4557753ae83dd1268e8261195dbe5c19a580d5ba6e4e9a",
				"dweb:/ipfs/QmTkGSJtaQrqjcyWM4AgemeEmKgtDydKPPVRajsUJRQSrK"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
				"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c",
			"license": "MIT",
			"urls": [
				"bzz-raw://13a51bc2b23827744dcf5bad10c69e72528cf015a6fe48c93632cdb2c0eb1251",
				"dweb:/ipfs/QmZwPA47Yqgje1qtkdEFEja8ntTahMStYzKf5q3JRnaR7d"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9",
				"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
			"keccak256": "0x10eb97d047f8d84fe263a02bb4a656ac6674f6679d74532cc37546289e073a9d",
			"license": "MIT",
			"urls": [
				"bzz-raw://3e41287d40b0c46982f1083d40d32de2761f009c5c51627fe79a7feb0ab1cf5c",
				"dweb:/ipfs/Qme7dbh6HX3ZvUJdbQAcVqXkmyXyfcLiUZRhhon3cU6K8p"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
			"keccak256": "0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575",
			"license": "MIT",
			"urls": [
				"bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e",
				"dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287",
				"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
				"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
				"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212",
			"license": "MIT",
			"urls": [
				"bzz-raw://821500c39d095eaa25b06f46e65f1d0e97c4c96b39227f79077dee7d9e84051f",
				"dweb:/ipfs/QmSTeGorKzSWF6HAmxo32uCZiEuKNvreQdUiX1AaYtUMTz"
			]
		},
		"contracts/DiplomeData.sol": {
			"keccak256": "0x7f2b511759b9d3b111511eefb2404eea9dddad3f0828a1ea6b400503a8ad7c1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://76350fbc579a86e58a054135624d7c1b47876371385b17e0e07bdb6d221f6fc4",
				"dweb:/ipfs/Qmf1X56Jtknk48Xikkdrab5qd3RkVKHjHk99fNT3dzBKCC"
			]
		},
		"contracts/DiplomeNFT.sol": {
			"keccak256": "0x289b48bf508ca5ae31bda6b89d0e4e61f87dfd61a1d13560ebcd14783ceefdae",
			"license": "MIT",
			"urls": [
				"bzz-raw://0582d571684bf706711fa59a5765ec702183ea042f3025bc13c254b5b5f072bc",
				"dweb:/ipfs/QmYpzHkvVWu31dxdrR9oiFhG36deDKv2JofKFnwDRqs6V4"
			]
		},
		"contracts/DiplomePlatform.sol": {
			"keccak256": "0x4e7cb916a69ad2b2f2d2e635b695460ba865728dbd767b5dc1431b587cba56ca",
			"license": "MIT",
			"urls": [
				"bzz-raw://d5ab8151ed8bceb282bfef3a3871def5d3075533246cc92998f5c164dd27f097",
				"dweb:/ipfs/Qmd8ZDqFvs6WHBnzfb55NU2u3ddgmrhoRatsT8yuB6BNPa"
			]
		},
		"contracts/DiplomeToken.sol": {
			"keccak256": "0x78cfad91a4d63f83b509bfd3f3ee391f72a91fd89160d22bbd48968c9a9eca54",
			"license": "MIT",
			"urls": [
				"bzz-raw://3bb7b3415e5bba775d9f3fbae50e687f9c34bce9f41f88801311a3ff7d8abce6",
				"dweb:/ipfs/QmWBUUo2V7QiQdXQ4gHBFxVpE9HLesrSj49wp46AGPTJPZ"
			]
		}
	},
	"version": 1
}